[
  {
    "route": "/dotnet/snippets/LINQ",
    "content": [
      {
        "type": "Title",
        "title": "LINQ"
      },
      {
        "type": "Note",
        "text": "LINQ (Language Integrated Query) is a useful feature of .NET which is used for querying collections and databases. \nIt provides two syntaxes:\nQuery Syntax: Similar to SQL queries.\nMethod Syntax Similar to method chaining in Javascript."
      },
      {
        "type": "Subtitle",
        "subtitle": "Also"
      },
      {
        "type": "Paragraph",
        "text": "Useful for checking if any object meets a certain condition."
      },
      {
        "type": "Code",
        "language": "csharp",
        "code": "int[] numbers = [1, 2, 3, 4, 5, 6];\n\nnumbers.Any(number => number == 2);\n// Expected Output: True"
      },
      {
        "type": "Subtitle",
        "subtitle": "Any"
      },
      {
        "type": "Paragraph",
        "text": "Useful for checking if all objects meet a certain condition."
      },
      {
        "type": "Code",
        "language": "csharp",
        "code": "int[] numbers = [1, 2, 3, 4, 5, 6];\n\nnumbers.All(number => number % 2 == 0);\n// Expected Output: False"
      },
      {
        "type": "Subtitle",
        "subtitle": "Count"
      },
      {
        "type": "Paragraph",
        "text": "Useful for checking how many objects meet a certain condition."
      },
      {
        "type": "Code",
        "language": "csharp",
        "code": "int[] numbers = [1, 2, 3, 4, 5, 6];\n\nnumbers.Count(number => number % 2 == 0);\n// Expected Output: True"
      },
      {
        "type": "Subtitle",
        "subtitle": "OrderBy, OrderByDescending"
      },
      {
        "type": "Paragraph",
        "text": "Useful for sorting a collection by a certain condition."
      },
      {
        "type": "Code",
        "language": "csharp",
        "code": "int[] numbers = [5, 2, 4, 4, 2, 1];\n\nint[] sortedNumbers = numbers.OrderBy(number => number).ToArray();\n// sortedNumbers = [1, 2, 2, 4, 4, 5];\n\nint[] sortedNumbers = numbers.OrderByDescending(number => number).ToArray();\n// sortedNumbers = [5, 4, 4, 2, 2, 1];"
      }
    ]
  }
]